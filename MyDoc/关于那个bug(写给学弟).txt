	在做完了时钟中断后，我终于也遇到了这个bug，正如前届学长在代码注释中所说的那样

	{
		但虽然三进程能轮流跑，但稳定性不好，调试很久不知原因所在。
		即在用户进程A中， 每输出“A...” ， 都延迟一会儿，为了使输出慢些，能看清楚。
		  while (1)
		{
			 printf("A...");
			 for (i=0;i<1000;i++) ; 
		  }
		但将 for (i=0;i<1000;i++) ; 改为 for (i=0;i<100;i++) ; 即使输出快些，
		则运行不正确，不能交替打印A、B、C，甚至停止输出。
		此时会发现SR寄存器EXL异常位被置1, 由于异常与中断对EPC操作不一样，即异常时EPC需加4,
		可能有问题。
		另外，也可能OS保存寄存器与恢复寄存器出现问题。
		还有， 也有可能是printcharc向串口输出字符时，由于没有原子性，可能被打断，可能出现异常；
		因为当用户程序不能正常运行时，EPC值大多为printcharc里某指令的地址。
		
	}


	但我看到这段注释的时候，我依然可以预期到他的到来，虽然我已经对先前的MIPS_OS做了多处关键位置的修改，但显然还是未能避免这个bug。她之所以如此吸引我并不仅仅因为她是学长未能解决的问题，相反，她应该是我的老朋友了，早在大三下操作系统实验的时候，我就已经和她见过面。当时是在调试关于fork函数的一段代码，但是我反反复复根本无法找到bug的原因，仿真器毫无理由的会运行到一个错误地址，然后崩溃，几乎无法调试跟踪，最后，还是李康助教找到了原因并告诉我，如果删除那段代码中的printf语句，就可以正确运行了，但是问题的原因，确实我们始终没有想明白的，直到今日，我再次遇到她，或许该做个了断了。

	问题就出在这里，由于printf的存在，三个进程无法正常运行，但是加入一条循环1000的语句后，正常了，但把1000改成100，又出现了问题。

	我仔细阅读了printf的代码，没有发现任何问题，于是我将printf的最源头console.c做了修改，改成调用uput，依然错误。

	我索性去掉了printf，直接改成uput，循环仍未1000，程序正常。

	把循环改成100，正常
	改成10，正常
	
	但是，去掉循环，又崩溃了。当我完全去掉循环后，程序会完整的运行一次A、B、C进程，然后无法运行。
	于是，我索性去掉了B、C中的uput语句，只将A中的留了下来，这时发现OS运行依次A后再也无法进入输出A了。

	我反复思考这个问题，直到今晚，我似乎有了一些想法，于是我打算把他们都记录下来。
	
	我推测，之所以学长留下的代码中，加入循环语句后可以正常运行，但是换成小循环后就不行了的原因是，如果时钟中断发生在printf中则会出错，但是发生在循环中则正确，大的循环会增加后者发生的几率。

	同样道理，由于uput的代码比printf的短的多，所以给一个小循环同样可以运行。

	由此推测，当一个进程在调用函数，如printf或uput时，发生了时钟中断，则会影响EPC等寄存器或是异常栈，导致sched_yield函数再次切到这个进程时无法正确还原当初场景。（仅留A中的uput那个测试更加说明了这一点）。

	如果问题的原因就是在函数调用时发生时钟中断的话，我们不妨再继续分析一下这个过程。

	首先函数调用会引起一系列的sp、reg以及堆栈操作，然后进入函数，寄存器发生变化，然后时钟中断，这时，CPU完成修改EPC、关中断、进入异常调用入口一系列操作，然后进入异常调用入口，分析异常原因，进入相应处理函数（int_entry)，这时，SAVE_ALL保存状态，然后进入时钟中断处理函数,调用schedyield进程调度函数，选择要运行的进程后，调用env_run，在env_run中，将系统运行栈中保存的寄存器拷贝到对应的进程控制块中。

	那么，函数调用会引发异常栈或是相关寄存器出错么？我忽然有些紧张，然后就下床了。

	现在，我打算就那种情况（A有uput，B、C没有，但是当A有for时正确，无for时错误）进行跟踪。
	1.先看A无for时。
		我跟到了A运行到时钟中断，这时EPC=0xbfc00040,也就是uput的入口地址，恩，继续跟踪，到B运行C运行到时钟中断，好了停下来，跟到env_pop_tf，这时k0=0x900000b8，这个是内核保存进程A进程块的地址，然后发现，我靠EPC=0xbfc00040了，说明应该没有问题啊，我继续跟着看，为何不能运行，感觉要到关键了！这时候我发现v0怎么还是0啊，不应该啊，按理来说v0是uput传入的参数，应该是65（'a'）才对啊，（等会儿要看看SAVE_ALL时的情况），先继续！
	现在已经跳回了进程A，并且回到了0xbfc00040了，但是，确实啊v0还是0呢，就是没有输出啊。
	继续跟
	该jr ra了，有点紧张（我还没搞懂那个跳转返回机制，什么link什么的，如果真是这儿出错了，那我就该去看这个了）
	咦，反汇编的是jr $31,而$31 = 0xbfc039fc，居然是handle_int中的地址。。怎么回事？？？
		"a.这个$31（ra）是什么时候填进去的？"
		"b.为什么这个地址现在变成了0xbfc039fc，这显然是个错误地址，什么时候变的"
		"c.当初的参数v0什么时候被搞丢了，当初的现场肯定不会是0"

	好了，一个一个看看(忽然感觉背后冷风阵阵，感觉像是一个惊人的阴谋，好怕，让我把校内打开。。）

	我现在又一次reset了debug,然后在ENV_A第一次遇到时钟中断时停了下来，这时观察寄存器组，发现此时
			v0 = 0x00000041
			ra = 0xbfc011ac
			EPC= 0xbfc00040
	恩，太好了，此时的三个值都是正确的，但是当一趟运行过去之后，就只剩下EPC的值正确了，这到底是什么原因呢？
		
	让我再继续跟进去看。恩，没问题，继续，恩，继续，我靠，怎么变了！
		。。。
	在handle_int里。。居然先调用了signal_int，然后才SAVE_ALL。。。。这他妈寄存器能不变么我靠！改过来！
	ok！
	但是。。但是，还有个问题，那为什么有循环的时候可以正确运行呢，不合理啊，应该也出问题才对啊。。我跟一下看看。

	啊，难道说从子函数跳转回来之后又会自动还原ra么？？我试试看
	把handle_int改回原样，去掉signal_int中的东西，方便跟踪，再次到达时钟中断，进入handle_int前，观察寄存器组
	   	{ v0 = 1, ra = 0xbfc011ac, EPC = 0xbfc011d4 }
		进入signal_int，观察寄存器组
	   	{ v0 = 1, ra = 0xbfc0399c, EPC = 0xbfc011d4 }
		退出signal_int，观察寄存器组
	   	{ v0 = 1, ra = 0xbfc0399c, EPC = 0xbfc011d4 }
	寄存器组没有发生变化。。。说明汇编代码没有自动还原调用者的寄存器组啊。。有点乱，明日仔细反应一下。。接着观察为什么有循环还能继续运行啊。
	好，我再在env_pop_tf处下断点，跟过去，然后发现，恩EPC还原正常，然后，ra还原错误，果真成了0xbfc0399c，噢，我总算知道了，怪不得，因为ENV_A永远运行不完所以不需要ra啊，所以即使ra是错误的也不会影响到他，哈哈哈！
		

	I solved it ! 
	That's amazing!

	okokok，现在叫我看看当初的操作系统实验，看看那个是不是同样的原因！				alright..they are different..and..the source code of Gxemul exactly are much more sophistic than cocoa-test-2011's emul, I'm a little bit lazy to do it. Maybe, just you,can solve it. Don't forget mail me when you did it. My email is fmarsf@gmail.com . 3QU
		

